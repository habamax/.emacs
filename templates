fundamental-mode

(today (format-time-string "%Y-%m-%d"))
(now (format-time-string "%Y-%m-%d %H:%M:%S"))
(shrug "¯\\_(ツ)_/¯")
(maxim "Maxim Kim")
(base64 (p "plain text" text)
     n
     (make-string (length (base64-encode-string text)) ?~)
     n q
     (base64-encode-string text))

fundamental-mode :when (re-search-backward "Maxim Kim$" (line-beginning-position) 'noerror)

(Kim "Kim <habamax@gmail.com>")

prog-mode

(fixme (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "FIXME ")
(todo (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "TODO ")
(bug (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "BUG ")
(hack (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "HACK ")

lisp-mode emacs-lisp-mode

(la "(lambda (" p ")" n> r> ")")
(l "(lambda (" p ") " p ")")

lisp-mode

(f "(format t \"" p "\"" q ")")

emacs-lisp-mode

(> "(thread-first " q ")")
(>> "(thread-last " q ")")
(def "(defun " p " (" p ")\n  \"" p "\"" n> r> ")")
(let "(let ((" p "))" n> r> ")")
(let* "(let* ((" p "))" n> r> ")")
(iflet "(if-let ((" p "))" n> r> ")")
(wlet "(when-let ((" p "))" n> r> ")")
(whilel "(while-let ((" p "))" n> r> ")")
(andl "(and-let* ((" p "))" n> r> ")")
(cond "(cond" n "(" q "))" >)
(pc "(pcase " (p "scrutinee") n "(" q "))" >)
(pclet "(pcase-let (" p ")" n> r> ")")
(pclet* "(pcase-let* (" p ")" n> r> ")")
(rec "(letrec (" p ")" n> r> ")")
(dotimes "(dotimes (" p ")" n> r> ")")
(dolist "(dolist (" p ")" n> r> ")")
(loop "(cl-loop for " p " in " p " do" n> r> ")")
(pt "(point)")
(var "(defvar " p "\n  \"" p "\")")
(local "(defvar-local " p "\n  \"" p "\")")
(const "(defconst " p "\n  \"" p "\")")
(custom "(defcustom " p "\n  \"" p "\"" n> ":type '" p ")")
(face "(defface " p " '((t :inherit " p "))\n  \"" p "\")")
(group "(defgroup " p " nil\n  \"" p "\"" n> ":group '" p n> ":prefix \"" p "-\")")
(macro "(defmacro " p " (" p ")\n  \"" p "\"" n> r> ")")
(alias "(defalias '" p " '" p ")")
(package ";;; " (file-name-nondirectory (or (buffer-file-name) (buffer-name)))
         " -- " p " -*- lexical-binding: t -*-" n
         ";;; Commentary:" p n ";;; Code:" n n q n
         "(provide '" (file-name-base (or (buffer-file-name) (buffer-name))) ")" n
         ";;; " (file-name-nondirectory (or (buffer-file-name) (buffer-name)))
         " ends here" n)

text-mode

(box "┌─" (make-string (length str) ?─) "─┐" n
     "│ " (s str)                       " │" n
     "└─" (make-string (length str) ?─) "─┘" n)
(abox "+-" (make-string (length str) ?-) "-+" n
      "| " (s str)                       " |" n
      "+-" (make-string (length str) ?-) "-+" n)
(cut "--8<---------------cut here---------------start------------->8---" n r n
     "--8<---------------cut here---------------end--------------->8---" n)
(calc (p "taylor(sin(x),x=0,3)" formula) n "----" n (format "%s" (calc-eval formula)))

org-mode

(tit "#+title: " p n "#+author: Maxim Kim" n "#+options: toc:nil num:nil")
(be "#+begin_" (s name) n> r> n "#+end_" name)
(ce "#+begin_center" n> r> n "#+end_center")
(qu "#+begin_quote" n> r> n "#+end_quote")
(ex "#+begin_example" n> r> n "#+end_example")
(ve "#+begin_verse" n> r> n "#+end_verse")
(s "#+begin_src " p n> r> n "#+end_src")
(gnuplot "#+begin_src gnuplot :var data=" (p "table") " :file " (p "plot.png") n> r> n "#+end_src" :post (org-edit-src-code))
(el "#+begin_src emacs-lisp" n> r> n "#+end_src" :post (org-edit-src-code))
(side "#+begin_sidenote" n> r> n "#+end_sidenote")
(si "#+begin_sidebar" n> r> n "#+end_sidebar")
;; admonitions
(ti "#+begin_tip" n> r> n "#+end_tip")
(no "#+begin_note" n> r> n "#+end_note")
(wa "#+begin_warning" n> r> n "#+end_warning")
(ca "#+begin_caution" n> r> n "#+end_caution")
(im "#+begin_important" n> r> n "#+end_important")


;; Local Variables:
;; mode: lisp-data
;; outline-regexp: "[a-z]"
;; End:
