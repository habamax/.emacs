fundamental-mode

(dd (format-time-string "%Y-%m-%d"))
(ddd (format-time-string "%Y-%m-%d %H:%M:%S"))
(shrug "¯\\_(ツ)_/¯")
(maxim "Maxim Kim")
(base64 (p "plain text" text)
     n
     (make-string (length (base64-encode-string text)) ?~)
     n q
     (base64-encode-string text))

fundamental-mode :when (re-search-backward "Maxim Kim$" (line-beginning-position) 'noerror)

(Kim "Kim <habamax@gmail.com>")

prog-mode

(fixme (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "FIXME ")
(todo (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "TODO ")
(bug (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "BUG ")
(hack (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "HACK ")

lisp-mode emacs-lisp-mode

(lam "(lambda (" p ")" n> r> ")")
(la "(lambda (" p ") " p ")")
(l "(let ((" p "))" n> r> ")")
(l* "(let* ((" p "))" n> r> ")")
(il "(if-let ((" p "))" n> r> ")")
(il* "(if-let* ((" p "))" n> r> ")")
(wl "(when-let ((" p "))" n> r> ")")
(wl* "(when-let* ((" p "))" n> r> ")")
(w "(when " q ")")
(i "(if " q ")")
(u "(unless " q ")")
(if "(if " (p "condition") n> (p "true") n> (p "false")")")
(ifn "(if (not " (p "condition") ")" n> (p "true") n> (p "false")")")
(ifa "(if (and " (p "condition") ")" n> (p "true") n> (p "false")")")
(ifo "(if (or " (p "condition") ")" n> (p "true") n> (p "false")")")
(o "(or " q ")")
(a "(and " q ")")
(n "(not " q ")")
(pr "(progn" n> q ")")

lisp-mode

(f "(format t \"" p "\"" q ")")

emacs-lisp-mode

(f "(format \"" p "\"" q ")")
(> "(thread-first " q ")")
(>> "(thread-last " q ")")
(def "(defun " (p "func-name") " (" p ")" n> "\"" p "\"" n> r> ")")
(dot "(dotimes (" p ")" n> r> ")")
(dol "(dolist (" p ")" n> r> ")")
(loop "(cl-loop for " p " in " p " do" n> r> ")")
(pt "(point)")
(package ";;; " (file-name-nondirectory (or (buffer-file-name) (buffer-name)))
         " -- " p " -*- lexical-binding: t -*-" n
         ";;; Commentary:" p n ";;; Code:" n n q n
         "(provide '" (file-name-base (or (buffer-file-name) (buffer-name))) ")" n
         ";;; " (file-name-nondirectory (or (buffer-file-name) (buffer-name)))
         " ends here" n)

org-mode

(tit "#+title: " p n "#+author: Maxim Kim" n "#+options: toc:nil num:nil")
(be "#+begin_" (s name) n> r> n "#+end_" name)
(ce "#+begin_center" n> r> n "#+end_center")
(qu "#+begin_quote" n> r> n "#+end_quote")
(ex "#+begin_example" n> r> n "#+end_example")
(ve "#+begin_verse" n> r> n "#+end_verse")
(s "#+begin_src " p n> r> n "#+end_src")
(gnuplot "#+begin_src gnuplot :var data=" (p "table") " :file " (p "plot.png") n> r> n "#+end_src" :post (org-edit-src-code))
(el "#+begin_src emacs-lisp" n> r> n "#+end_src" :post (org-edit-src-code))
(side "#+begin_sidenote" n> r> n "#+end_sidenote")
(si "#+begin_sidebar" n> r> n "#+end_sidebar")
;; admonitions
(ti "#+begin_tip" n> r> n "#+end_tip")
(no "#+begin_note" n> r> n "#+end_note")
(wa "#+begin_warning" n> r> n "#+end_warning")
(ca "#+begin_caution" n> r> n "#+end_caution")
(im "#+begin_important" n> r> n "#+end_important")


;; Local Variables:
;; mode: lisp-data
;; outline-regexp: "[a-z]"
;; End:
